#include <iostream>
#include <stack>
#include <queue>
using namespace std;

class Node {
public:
    int data, height;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        height = 1;
        left = right = nullptr;
    }
};

class AVLTree {
public:
    Node* root;

    AVLTree() { root = nullptr; }

    int height(Node* n);
    int getBalance(Node* n);
    Node* rightRotate(Node* y);
    Node* leftRotate(Node* x);
    Node* insert(Node* node, int key);
    Node* minValueNode(Node* node);
    Node* deleteNode(Node* root, int key);
    Node* search(Node* node, int key);

    void Inorder(Node* node);
    void Preorder(Node* node);
    void Postorder(Node* node);

    void nonRecursiveInorder();
    void nonRecursivePreorder();
    void nonRecursivePostorder();
    void levelOrder();

    void menu();
};

int AVLTree::height(Node* n) {
    return n ? n->height : 0;
}

int AVLTree::getBalance(Node* n) {
    return n ? height(n->left) - height(n->right) : 0;
}

Node* AVLTree::rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

Node* AVLTree::leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

Node* AVLTree::insert(Node* node, int key) {
    if (!node) return new Node(key);

    if (key < node->data)
        node->left = insert(node->left, key);
    else if (key > node->data)
        node->right = insert(node->right, key);
    else
        return node; // Duplicate keys not allowed

    node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);

    if (balance > 1 && key < node->left->data)
        return rightRotate(node);
    if (balance < -1 && key > node->right->data)
        return leftRotate(node);
    if (balance > 1 && key > node->left->data) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && key < node->right->data) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

Node* AVLTree::minValueNode(Node* node) {
    Node* current = node;
    while (current->left)
        current = current->left;
    return current;
}

Node* AVLTree::deleteNode(Node* root, int key) {
    if (!root) {
        cout << "Value not found in the tree.\n";
        return nullptr;
    }

    if (key < root->data)
        root->left = deleteNode(root->left, key);
    else if (key > root->data)
        root->right = deleteNode(root->right, key);
    else {
        if (!root->left || !root->right) {
            Node* temp = root->left ? root->left : root->right;
            if (!temp) {
                temp = root;
                root = nullptr;
            } else
                *root = *temp;
            delete temp;
        } else {
            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
    }

    if (!root) return nullptr;

    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    cout << "Required value is deleted\n";
    return root;
}

Node* AVLTree::search(Node* node, int key) {
    if (!node || node->data == key)
        return node;
    if (key < node->data)
        return search(node->left, key);
    return search(node->right, key);
}

void AVLTree::Inorder(Node* node) {
    if (!node) return;
    Inorder(node->left);
    cout << node->data << " ";
    Inorder(node->right);
}

void AVLTree::Preorder(Node* node) {
    if (!node) return;
    cout << node->data << " ";
    Preorder(node->left);
    Preorder(node->right);
}

void AVLTree::Postorder(Node* node) {
    if (!node) return;
    Postorder(node->left);
    Postorder(node->right);
    cout << node->data << " ";
}

void AVLTree::nonRecursiveInorder() {
    if (!root) { cout << "Tree is empty!" << endl; return; }
    stack<Node*> s;
    Node* current = root;
    cout << "Non-Recursive Inorder: ";
    while (current || !s.empty()) {
        while (current) {
            s.push(current);
            current = current->left;
        }
        current = s.top(); s.pop();
        cout << current->data << " ";
        current = current->right;
    }
    cout << endl;
}

void AVLTree::nonRecursivePreorder() {
    if (!root) { cout << "Tree is empty!" << endl; return; }
    stack<Node*> s;
    s.push(root);
    cout << "Non-Recursive Preorder: ";
    while (!s.empty()) {
        Node* current = s.top(); s.pop();
        cout << current->data << " ";
        if (current->right) s.push(current->right);
        if (current->left) s.push(current->left);
    }
    cout << endl;
}

void AVLTree::nonRecursivePostorder() {
    if (!root) { cout << "Tree is empty!" << endl; return; }
    stack<Node*> s1, s2;
    s1.push(root);
    cout << "Non-Recursive Postorder: ";
    while (!s1.empty()) {
        Node* current = s1.top(); s1.pop();
        s2.push(current);
        if (current->left) s1.push(current->left);
        if (current->right) s1.push(current->right);
    }
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
    cout << endl;
}

void AVLTree::levelOrder() {
    if (!root) { cout << "Tree is empty.\n"; return; }
    queue<Node*> q;
    q.push(root);
    cout << "\nLevel-wise traversal: ";
    while (!q.empty()) {
        Node* current = q.front(); q.pop();
        cout << current->data << " ";
        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }
    cout << endl;
}

void AVLTree::menu() {
    int choice, value;
    do {
        cout << "\n======= AVL Tree Menu =======\n";
        cout << "1. Insert\n";
        cout << "2. Recursive Inorder\n";
        cout << "3. Recursive Preorder\n";
        cout << "4. Recursive Postorder\n";
        cout << "5. Delete Node\n";
        cout << "6. Level-wise Printing\n";
        cout << "7. Non-Recursive Inorder\n";
        cout << "8. Non-Recursive Preorder\n";
        cout << "9. Non-Recursive Postorder\n";
        cout << "10. Quit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin >> value;
                root = insert(root, value);
                break;
            case 2:
                cout << "Recursive Inorder: ";
                Inorder(root);
                cout << endl;
                break;
            case 3:
                cout << "Recursive Preorder: ";
                Preorder(root);
                cout << endl;
                break;
            case 4:
                cout << "Recursive Postorder: ";
                Postorder(root);
                cout << endl;
                break;
            case 5:
                cout << "Enter value to delete: ";
                cin >> value;
                root = deleteNode(root, value);
                break;
            case 6:
                levelOrder();
                break;
            case 7:
                nonRecursiveInorder();
                break;
            case 8:
                nonRecursivePreorder();
                break;
            case 9:
                nonRecursivePostorder();
                break;
            case 10:
                cout << "Exiting program.......\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 10);
}

int main() {
    AVLTree avl;
    avl.menu();
    return 0;
}
