--------------Prism------------------
#include <iostream>
#include <algorithm>

using namespace std;

#define INF 9999

int main() {
    int V1; // Number of vertices
    cout << "Enter the total number of vertices: ";
    cin >> V1;

    int G[V1][V1]; // Graph adjacency matrix
    bool selected[V1]; // Tracks selected nodes for MST
    int no_edge = 0, cost_path = 0;

    // Input graph matrix
    for (int i = 0; i < V1; i++) {
        for (int j = 0; j < V1; j++) {
            if (i == j) {
                G[i][j] = INF; // No self-loops
            } else if (j > i) {
                cout << "Enter weight from " << i << " to " << j << ": ";
                cin >> G[i][j];
                if (G[i][j] == 0) G[i][j] = INF; // Replace 0 with INF for non-edges
                G[j][i] = G[i][j]; // Undirected graph
            }
        }
    }

    // Display input graph matrix
    cout << "\nAdjacency Matrix:\n";
    for (int i = 0; i < V1; i++) {
        for (int j = 0; j < V1; j++) {
            cout << (G[i][j] == INF ? "INF" : to_string(G[i][j])) << " ";
        }
        cout << endl;
    }

    // Prim's Algorithm
    fill(selected, selected + V1, false); // Initialize selected array
    selected[0] = true; // Start from the first node

    cout << "\nEdges in MST:\n";
    cout << "Edge : Weight\n";

    while (no_edge < V1 - 1) {
        int min = INF, x = -1, y = -1;

        for (int i = 0; i < V1; i++) {
            if (selected[i]) {
                for (int j = 0; j < V1; j++) {
                    if (!selected[j] && G[i][j] < min) {
                        min = G[i][j];
                        x = i;
                        y = j;
                    }
                }
            }
        }

        if (x != -1 && y != -1) {
            cout << x << " --> " << y << " : " << G[x][y] << endl;
            cost_path += G[x][y];
            selected[y] = true;
            no_edge++;
        }
    }

    cout << "\nMinimum cost of MST: " << cost_path << endl;
    return 0;
}

-------------------------Kruskal------------------------------------
#include <iostream>
#include <algorithm>
using namespace std;

#define MAX 100

struct Edge {
    int u, v, weight;
};

Edge edges[MAX];
Edge mst[MAX];
int parent[MAX];
int n, e;

int find(int i) {
    if (parent[i] == i)
        return i;
    return parent[i] = find(parent[i]);
}

void unionSets(int u, int v) {
    int set_u = find(u);
    int set_v = find(v);
    parent[set_u] = set_v;
}

bool compare(Edge a, Edge b) {
    return a.weight < b.weight;
}

void sortEdges() {
    for (int i = 0; i < e - 1; i++) {
        for (int j = 0; j < e - i - 1; j++) {
            if (edges[j].weight > edges[j + 1].weight) {
                Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }
}

int main() {
    n = 4;
    e = 5;

    edges[0] = {0, 1, 10};
    edges[1] = {0, 2, 6};
    edges[2] = {0, 3, 5};
    edges[3] = {1, 3, 15};
    edges[4] = {2, 3, 4};

    for (int i = 0; i < n; i++)
        parent[i] = i;

    sortEdges();

    int totalWeight = 0;
    int count = 0;

    for (int i = 0; i < e && count < n - 1; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int set_u = find(u);
        int set_v = find(v);

        if (set_u != set_v) {
            mst[count++] = edges[i];
            totalWeight += edges[i].weight;
            unionSets(u, v);
        }
    }

    cout << "Edges in Minimum Spanning Tree:\n";
    for (int i = 0; i < count; i++) {
        cout << mst[i].u << " - " << mst[i].v << " : " << mst[i].weight << endl;
    }
    cout << "Total weight: " << totalWeight << endl;

    return 0;
}

